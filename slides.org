#+TITLE: Functional Programming: Whys and Whats

* About Me:

  - John Soo
  - Developer, Team Vicaarious
  - Your local functional programming enthusiast

* Why is software harder to produce when there is more of it?

** Two things I want to focus on

   1. Communication:
      - Code's capacity to express the intent of the programmer to other humans
        + In other words, you might say: Readability, Expressiveness, Intent

   2. Correctness:
      - Code's capacity to do what is specified and not break

* Correctness is not guaranteed by testing

** Purpose of testing is to verify correctness

** Problem: testing is not exhaustively correct

** Correct software works for all inputs

*** Number of inputs and states to test is enormous
*** All those tests must be written manually!

     - Rarely achieved
     - This includes paths and inputs that the programmer cannot foresee
       + (like exceptions, invalid input, timeouts, etc)
       + Even with branch coverage, input coverage is not guaranteed

* Communication is impeded by needless indirection

** Code tells other developers what the computer ought to do.

   - More code = more to understand
   - More relevant code in more places = more to store in the reader's head
   - Correctness is also reduced by poor communication
     + Code must be understood to be made correct

* What if I told you that you could have all this for free?

** You guessed it, functional programming!

* So what is functional programming?

** (Some) Core principles:

   - Evaluation of expressions instead of executing statements
   - Preferring pure functions - given the same input - will always return the same output
   - Emphasizing immutability over mutating state
   - Programming as statements of truths that cannot change
   - Of course, first class functions - functions are values

     Most functional programs boil down to:
     f(g(h(x)))

* Many flavors

  A spectrum:

  <------------------------------------------------>
  Haskell       Scala       Clojure       JavaScript

  - You likely can/do some functional programming everyday

* Declarative and definitional (as opposed to imperative)

  - Instead of providing a set of steps to achieve a goal (imperative)
    you define and (often) let the computer implement the solution
  - No sense of time or order

    #+begin_src js
      // Like a recipe
      function imperativeFactorial(n) {
          var result = 1;
          if (n <= 1) {
              return result;
          }

          while (n >= 1) {
              result *= n;
              --n;
          }

          return result;
      }

      // Expressions and statements of truth
      function declarativeFactorial(n) {
          if (n >= 1) {
              return 1;
          } else {
              return n * declarativeFactorial(n - 1);
          }
      }
    #+end_src

* Immutability

  - No name (variable) shall ever mean two different things
  - Again, no sense of time or order

#+begin_src haskell
  x = 5

  -- Compile error!
  x = 6

  -- Fresh list - no mutation!
  lowerCaseAll [] = []
  lowerCaseAll (char:chars) = toLower char : lowerCaseAll chars

  -- No worries about the state of the important objects
  -- We can pass around db's, accounts, anything
  updateAccount database account newInfo = update database account newInfo
#+end_src


* First Class Functions

  - functions can be things too!

#+begin_src js
  // Functions as arguments
  [1, 2, 3, 4, 5]
      .map(x => x + 1)
      .filter(x => x < 5)
      .reduce((x, y) => x + y, 0)

  // Return a function from a function
  const f = x => y => z => x + y * z

  // No builder pattern necessary!
  const updateAccount = database => account => newInfo =>
      update(database, account, newInfo)
#+end_src

* There is a lot to functional programming

** I urge you to learn more at your local meetup
   (Orange Combinator meets 7-9pm every monday!)

* But John!

** How does this relate to correctness and communication?

* Pain Point: Refactoring Code

** Refactoring takes a lot of thought and you can break things!

  - need a complete understanding of ALL your code to change a small piece
    + leads to unnecessary cognitive load
  - refactoring can lead to breakage
    + sometimes this means that refactoring never happens
    + this leads to the WTF moments we experience

    #+begin_src java
      // If I want to refactor the AccountManager I have to understand what the
      // delegate and repository do!
      // And no, descriptive names do not help!
      public class AccountManager {

          private AccountDelegate delegate;
          private AccountRepository repository;

          ...

          public AccountStatus signIn(HttpServletRequest request) {
              String accountId = request.getAttribute("accountId");
              Account account = repository.retrieveAccount(accountId);

              delegate.signIn(request, account);
              return account.getStatus();
          }
      }
    #+end_src

* Functional Approach: Strong types and immutability

  - With functional type systems, easily communicate (all) of the states you need
  - Immutability means nullary, void functions necessarily perform side effects

    #+begin_src haskell
      newtype Level = Int

      -- Creating a new kind of Message will result in
      -- compiler errors or warnings
      data Message = Set Level | Reset


      setLevel :: Message -> Level -> Level
      setLevel message level = case message of
        Reset        -> 1

        Set newLevel -> case level of
          0 -> 1

          _ -> newLevel + 30

      -- Main returns Unit and takes no arguments.
      -- Side effects are communicated precisely
      main :: IO ()
      main = putStrLn "Hello World"
    #+end_src

* Pain Point: Procedural and OO code is verbose

** And each line of code is a liability!

  - How many times have you done the following this week? month? lifetime?
  - Creating a whole new class or object simply to pass behavior around

    #+begin_src java
      public class MyController {

          // I have to create both of these classes just to
          // use the functions `isValid` and `handle`!
          // Don't even try to tell me that anonymous inner classes help!
          private MyHandler handler;
          private MyValidator validator;

          public MyController(MyHandler handler) {
              this.handler = handler;
          }

          public ResponseObject processMyRoute(HttpServletRequest request) {
              if (validator.isValid(request.getAttribute("myForm"))) {
                  return handler.handle(model, request);
              } else {
                  return null;
              }
          }
      }
    #+end_src

* Functional Approach

** First class functions

** Mathematically founded abstraction

** Syntax sugar

  - syntax replaces particularly verbose code
  - interface does not require reading a definition
  - behavior needed at call site is defined at call site

#+begin_src js
    // Map and maybe (for example) are well known abstractions.
    // They can be used without understanding implementation.
    // Note they can apply to arrays, hashmaps, futures, streams, tuples, etc.
    const niceForm = ({ body: { myForm } }) =>
        validate(myForm)
           .map(_ => "excellent form, sir!")
           .maybe("poor form, old chap", response => response)
#+end_src

* Pain Point: Testing is a lot of work!

  - there to find mistakes that a compiler could often find
    + null checks
    + untested paths
  - side effects, mocking, are so much work or so much magic!

#+begin_src java
  public class MyHandlerTest {
      privateMyHandler handler;

      @Test
      public void doesNotAlwaysFail() {
          assertNotNull(handler.handle(new MockHttpServletRequest()));
      }

      @Test
      public void stillDoesNotAlwaysFail() {
          assertEquals(
                handler.handle(new MockHttpServletRequest()).getStatusCode(),
                200
          );
      }

      @Test
      public void maybeNeedToMockAClassAndHopeItStillPasses() {
          Validator validator = mock(Validator.class);
          expect(validator.validate("junk in the form"))
              .andReturn("poor form, old chap");
          Handler testObj = new Handler(validator);

          HttpResponse res = testObj.handle(new Form("junk in the form"));

          // Whew, I'm tired!
          assertEquals(400, res.getStatusCode());
      }

      // How many of these do we write until we are satisfied?
      // I'm already tired!
  }
#+end_src

* Functional Approach

** Pure Functions

** Static types and compilers

   - (Really great, but not available everywhere)

** Generative testing (like fuzz testing)

** Dependent types and formal verification

   - (Even better than testing but still not quite production ready)

#+begin_src js
  describe("this function is pure so it always returns the same value for the same input", () => {
      expect(niceForm("junk form")).equalTo("poor form, old chap!")
  })
#+end_src

#+begin_src haskell
  describe "my widget" $ do
   it "always gives you a soda when you push the red button" $ do
     -- Generative testing gets you closer to `for all` than most
     forAll redButtons (\button -> pushButton button == Soda)
#+end_src

#+begin_src idris
  -- Formal verification via dependent types is coming!
  -- Really is for all x, y!
  my_functhion_injective : func x = func y -> x = y
  my_function_injective prf = ...
#+end_src

* What can we do today?

** In any setting

*** Prefer immutability

*** Prefer pure functions

** In Java specifically

*** Compose with classes (in Java 7)

*** Move to Java 8!

* If you are interested!

  - [[https://www.gitbook.com/book/drboolean/mostly-adequate-guide/details][Professor Frisbys Mostly Adequate Guide to Functional Programming]]
  - [[http://haskellbook.com/][Haskell Programming from First Principles]]
  - [[https://www.youtube.com/watch?v=E8I19uA-wGY][Functional Design Patterns]]

** Come to the Orange Combinator (The next Monday you are in Southern California)!
    We would love to have you!
